{"version":3,"file":"typeof.js","sources":["../src/main.ts"],"sourcesContent":["/* eslint-disable import/no-unused-modules */\n/**\n * @overload\n */\nexport function isString(value: unknown): value is string;\n\n/**\n * @overload\n */\nexport function isString(value: unknown): boolean;\n\n/**\n * Checks if the given value is a string.\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} True if the value is a string, false otherwise.\n */\nexport function isString(value: unknown): boolean {\n  return typeof value === 'string';\n}\n\n/**\n * @overload\n */\nexport function isNotString<T>(value: T): value is Exclude<T, string>;\n\n/**\n * @overload\n */\nexport function isNotString(value: unknown): boolean;\n\n/**\n * Checks if the given value is not a string.\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} True if the value is not a string, false otherwise.\n */\nexport function isNotString(value: unknown): boolean {\n  return !isString(value);\n}\n\n/**\n * @overload\n */\nexport function isNumber(value: unknown): value is number;\n\n/**\n * @overload\n */\nexport function isNumber(value: unknown): boolean;\n\n/**\n * Checks if the given value is a number.\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} True if the value is a number, false otherwise.\n */\nexport function isNumber(value: unknown): boolean {\n  return typeof value === 'number';\n}\n\n/**\n * @overload\n */\nexport function isNotNumber<T>(value: T): value is Exclude<T, number>;\n\n/**\n * @overload\n */\nexport function isNotNumber(value: unknown): boolean;\n\n/**\n * Checks if the given value is not a number.\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} True if the value is not a number, false otherwise.\n */\nexport function isNotNumber(value: unknown): boolean {\n  return !isNumber(value);\n}\n\n/**\n * @overload\n */\nexport function isBoolean(value: unknown): value is boolean;\n\n/**\n * @overload\n */\nexport function isBoolean(value: unknown): boolean;\n\n/**\n * Checks if the given value is a boolean.\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} True if the value is a boolean, false otherwise.\n */\nexport function isBoolean(value: unknown): boolean {\n  return typeof value === 'boolean';\n}\n\n/**\n * @overload\n */\nexport function isNotBoolean<T>(value: T): value is Exclude<T, boolean>;\n\n/**\n * @overload\n */\nexport function isNotBoolean(value: unknown): boolean;\n\n/**\n * Checks if the given value is not a boolean.\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} True if the value is not a boolean, false otherwise.\n */\nexport function isNotBoolean(value: unknown): boolean {\n  return !isBoolean(value);\n}\n\n/**\n * @overload\n */\nexport function isUndefined(value: unknown): value is undefined;\n\n/**\n * @overload\n */\nexport function isUndefined(value: unknown): boolean;\n\n/**\n * Checks if the given value is undefined.\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} True if the value is undefined, false otherwise.\n */\nexport function isUndefined(value: unknown): boolean {\n  return typeof value === 'undefined';\n}\n\n/**\n * @overload\n */\nexport function isNotUndefined<T>(value: T): value is Exclude<T, undefined>;\n\n/**\n * @overload\n */\nexport function isNotUndefined(value: unknown): boolean;\n\n/**\n * Checks if the given value is not undefined.\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} True if the value is not undefined, false otherwise.\n */\nexport function isNotUndefined(value: unknown): boolean {\n  return !isUndefined(value);\n}\n\n/* node:coverage disable */\n/**\n * @overload\n */\nexport function isDefined<T>(value: T): value is Exclude<T, undefined>;\n\n/**\n * @overload\n */\nexport function isDefined(value: unknown): boolean;\n\n/**\n * Copy of `isNotUndefined`\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} True if the value is defined, false otherwise.\n */\nexport function isDefined(value: unknown): boolean {\n  return !isUndefined(value);\n}\n/* node:coverage enable */\n\n/**\n * @overload\n */\nexport function isObjectPlain(value: unknown): value is Record<string, unknown>;\n\n/**\n * @overload\n */\nexport function isObjectPlain(value: unknown): boolean;\n\n/**\n * Determines whether a value is a plain object (i.e., created via an object literal,\n * `Object.create(null)`, or with `Object` as its prototype).\n *\n * This excludes arrays, functions, class instances, built-ins like `Date`/`Map`/`Set`,\n * and other exotic objects.\n *\n * @param {unknown} value - The value to test.\n * @returns {boolean} `true` if `value` is a plain object, otherwise `false`.\n *\n * @example\n * ```ts\n * const a: unknown = { x: 1 };\n * const b: unknown = [];\n * const c: unknown = new Date();\n * const d: unknown = Object.create(null);\n *\n * isObjectPlain(a); // true\n * isObjectPlain(b); // false (array)\n * isObjectPlain(c); // false (built-in)\n * isObjectPlain(d); // true (null prototype)\n *\n * // Type narrowing example:\n * const value: unknown = { foo: 42 };\n * if (isObjectPlain(value)) {\n *   // value is now Record<string, unknown>\n *   console.log(value.foo);\n * }\n * ```\n *\n * @see https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n * @see https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\n */\nexport function isObjectPlain(value: unknown): boolean {\n  if (Object.prototype.toString.call(value) !== '[object Object]') return false;\n\n  const proto = Object.getPrototypeOf(value);\n\n  return proto === Object.prototype || proto === null;\n}\n\n/**\n * @overload\n */\nexport function isObjectStrict(\n  value: unknown\n): value is Record<string, unknown>;\n\n/**\n * @overload\n */\nexport function isObjectStrict(value: unknown): boolean;\n\n/**\n * Checks if a given value is a plain object.\n *\n * A plain object is an object created by the `{}` syntax, `Object.create(null)`,\n * or using `new Object()`. This function ensures that the value is an object\n * and does not have an unusual prototype chain.\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} `true` if the value is a plain object, otherwise `false`.\n *\n * @example\n * ```ts\n * console.log(isObjectStrict({})); // Output: true\n * console.log(isObjectStrict(Object.create(null))); // Output: true\n * console.log(isObjectStrict([])); // Output: false\n * console.log(isObjectStrict(new Date())); // Output: false\n * console.log(isObjectStrict(null)); // Output: false\n * ```\n *\n * **Features**\n * - ✅ Recognizes only **plain objects** (created via `{}`, `new Object()`, `Object.create(null)`, etc.).\n * - ❌ Rejects **arrays**, **functions**, **DOM elements**, **class instances**, and **custom objects** with modified constructors.\n *\n * **Behavior**\n * - ✅ `isObjectStrict({})` → `true`\n * - ❌ `isObjectStrict([])` → `false`\n * - ❌ `isObjectStrict(() => {})` → `false`\n * - ✅ `isObjectStrict(Object.create(null))` → `true`\n *\n * **When to use**\n * - Use `isObjectStrict` when you need a **strict check for plain objects**.\n * - Use `isObjectLoose` if you need to check if a value is an **object-like structure**, including functions.\n */\nexport function isObjectStrict(value: unknown): boolean {\n  if (typeof value !== 'object' || value === null) return false;\n\n  if (Object.prototype.toString.call(value) !== '[object Object]') return false;\n\n  const proto = Object.getPrototypeOf(value);\n\n  if (proto === null) return true;\n\n  const Ctor = Object.prototype.hasOwnProperty.call(proto, 'constructor')\n    ? proto.constructor\n    : null;\n\n  return (\n    typeof Ctor === 'function' &&\n    Ctor instanceof Ctor &&\n    Function.prototype.call(Ctor) === Function.prototype.call(value)\n  );\n}\n\n/**\n * @overload\n */\nexport function isObjectLoose(value: unknown): value is object;\n\n/**\n * @overload\n */\nexport function isObjectLoose(value: unknown): boolean;\n\n/**\n * Checks if a given value is an object or a function.\n *\n * This function verifies whether the provided value is of type `'object'` or `'function'`\n * while ensuring that `null` is excluded.\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} `true` if the value is an object or function, otherwise `false`.\n *\n * @example\n * ```ts\n * console.log(isObjectLoose({})); // Output: true\n * console.log(isObjectLoose([])); // Output: true\n * console.log(isObjectLoose(() => {})); // Output: true\n * console.log(isObjectLoose(null)); // Output: false\n * console.log(isObjectLoose(42)); // Output: false\n * ```\n *\n * **Features**\n * - ✅ Recognizes **all objects** (plain objects, arrays, functions, dates, etc.).\n * - ✅ Recognizes **functions** as objects (since functions are technically objects in JavaScript).\n * - ❌ Does **not** differentiate between plain objects and special objects (like arrays, functions, DOM nodes, etc.).\n *\n * **Behavior**\n * - ✅ `isObjectLoose({})` → `true`\n * - ✅ `isObjectLoose([])` → `true`\n * - ✅ `isObjectLoose(() => {})` → `true`\n * - ❌ `isObjectLoose(null)` → `false`\n *\n * **When to use**\n * - Use `isObjectStrict` when you need a **strict check for plain objects**.\n * - Use `isObjectLoose` if you need to check if a value is an **object-like structure**, including functions.\n *\n * **Comparison**\n * | Feature                | Strict Check (`isObjectStrict`) | Loose Check (`isObjectLoose`) |\n * |------------------------|----------------------|----------------------|\n * | Recognizes plain objects | ✅ Yes | ✅ Yes |\n * | Recognizes functions    | ❌ No | ✅ Yes |\n * | Recognizes arrays       | ❌ No | ✅ Yes |\n * | Recognizes `Object.create(null)` objects | ✅ Yes | ✅ Yes |\n * | Recognizes class instances | ❌ No | ✅ Yes |\n * | Recognizes DOM elements | ❌ No | ✅ Yes |\n * | Complexity             | 🔴 High | 🟢 Low |\n */\nexport function isObjectLoose(value: unknown): boolean {\n  const type = typeof value;\n\n  return value !== null && (type === 'object' || type === 'function');\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ClassCtor<T = any> = new (...args: any[]) => T;\n\n/**\n * @overload\n */\nexport function isClass(value: unknown): value is ClassCtor;\n\n/**\n * @overload\n */\nexport function isClass(value: unknown): boolean;\n\n/**\n * Checks if a given value is a class constructor.\n *\n * This function determines whether the provided value is a class by verifying\n * if it is a function and checking its prototype descriptor. Class constructors\n * always have a non-writable prototype, while regular functions do not.\n *\n * Will always return false on built in constructors like `Date` or `Array`.\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} `true` if the value is a class constructor, otherwise `false`.\n *\n * @example\n * ```ts\n * class MyClass {}\n * console.log(isClass(MyClass)); // Output: true\n *\n * function regularFunction() {}\n * console.log(isClass(regularFunction)); // Output: false\n *\n * console.log(isClass(() => {})); // Output: false\n * console.log(isClass(null)); // Output: false\n * ```\n */\nexport function isClass(value: unknown): boolean {\n  if (typeof value !== 'function') return false;\n\n  if (isBuiltInConstructor(value)) return false;\n\n  try {\n    // Check if the function has a valid prototype (classes always do)\n    const descriptor = Object.getOwnPropertyDescriptor(value, 'prototype');\n\n    return !!descriptor && !descriptor.writable; // Class prototypes are non-writable\n  } catch {\n    return false;\n  }\n}\n\n/**\n * A union of standard JavaScript **constructable** built-ins\n * (e.g., `Object`, `Array`, `Date`, `Map`, etc.).\n */\nexport type BuiltInConstructor =\n  | ObjectConstructor\n  | ArrayConstructor\n  | FunctionConstructor\n  | StringConstructor\n  | NumberConstructor\n  | BooleanConstructor\n  | DateConstructor\n  | RegExpConstructor\n  | ErrorConstructor\n  | EvalErrorConstructor\n  | RangeErrorConstructor\n  | ReferenceErrorConstructor\n  | SyntaxErrorConstructor\n  | TypeErrorConstructor\n  | URIErrorConstructor\n  | MapConstructor\n  | WeakMapConstructor\n  | SetConstructor\n  | WeakSetConstructor\n  | PromiseConstructor;\n\n/**\n * @overload\n */\nexport function isBuiltInConstructor(\n  value: unknown\n): value is BuiltInConstructor;\n\n/**\n * @overload\n */\nexport function isBuiltInConstructor(value: unknown): boolean;\n\n/**\n * Checks if a given value is a built-in JavaScript constructor.\n *\n * This function verifies whether the provided value is a function and matches\n * one of JavaScript's built-in constructors, such as `Object`, `Array`, `Function`, etc.\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} `true` if the value is a built-in constructor, otherwise `false`.\n *\n * @example\n * ```ts\n * console.log(isBuiltInConstructor(Object)); // Output: true\n * console.log(isBuiltInConstructor(Array)); // Output: true\n * console.log(isBuiltInConstructor(class MyClass {})); // Output: false\n * console.log(isBuiltInConstructor(() => {})); // Output: false\n * console.log(isBuiltInConstructor(123)); // Output: false\n * ```\n */\nexport function isBuiltInConstructor(value: unknown): boolean {\n  if (typeof value !== 'function') return false;\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n  const builtins: Function[] = [\n    Object,\n    Array,\n    Function,\n    String,\n    Number,\n    Boolean,\n    Date,\n    RegExp,\n    Error,\n    EvalError,\n    RangeError,\n    ReferenceError,\n    SyntaxError,\n    TypeError,\n    URIError,\n    Map,\n    WeakMap,\n    Set,\n    WeakSet,\n    Promise\n  ];\n\n  return builtins.includes(value as BuiltInConstructor);\n}\n\n/**\n * Built-in globals that are **callable**:\n * - All standard constructors (above)\n * - Plus callable, **non-constructable** built-ins: `BigInt` and `Symbol`\n */\nexport type BuiltInCallable =\n  | BuiltInConstructor\n  | typeof BigInt\n  | typeof Symbol;\n\n/**\n * Canonical set of built-in callables.\n * Note: identity is **realm-specific** (different iframes/VMs have different\n * constructor identities), so values from another realm won't match here.\n */\nconst BUILTIN_CALLABLES: ReadonlySet<BuiltInCallable> = new Set([\n  Object,\n  Array,\n  Function,\n  String,\n  Number,\n  Boolean,\n  Date,\n  RegExp,\n  Error,\n  EvalError,\n  RangeError,\n  ReferenceError,\n  SyntaxError,\n  TypeError,\n  URIError,\n  Map,\n  WeakMap,\n  Set,\n  WeakSet,\n  Promise,\n  BigInt,\n  Symbol\n]);\n\n/**\n * @overload\n */\nexport function isBuiltInCallable(value: unknown): value is BuiltInCallable;\n\n/**\n * @overload\n */\nexport function isBuiltInCallable(value: unknown): boolean;\n\n/**\n * Checks if a given value is a **built-in JavaScript callable**.\n *\n * A built-in callable is either:\n * - a standard **constructor** (e.g., `Object`, `Array`, `Date`, `Map`), or\n * - a callable **non-constructable** built-in (`BigInt`, `Symbol`).\n *\n * This function first verifies the value is a function, then tests identity\n * against a curated set of built-ins.\n *\n * Overloads:\n * - **Predicate:** narrows the value to `BuiltInCallable` on success.\n * - **Boolean:** usable in contexts that require a plain `(v) => boolean`.\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} `true` if the value is a built-in callable, otherwise `false`.\n *\n * @example\n * ```ts\n * isBuiltInCallable(Object);       // true\n * isBuiltInCallable(Array);        // true\n * isBuiltInCallable(BigInt);       // true (callable but not a constructor)\n * isBuiltInCallable(Symbol);       // true (callable but not a constructor)\n * isBuiltInCallable(class X {});   // false\n * isBuiltInCallable(() => {});     // false\n * isBuiltInCallable(123);          // false\n *\n * // Type narrowing:\n * declare const fn: unknown;\n * if (isBuiltInCallable(fn)) {\n *   // fn is now typed as BuiltInCallable\n *   console.log(fn.name);\n * }\n * ```\n *\n * @see https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects\n * @see https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/BigInt\n * @see https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol\n */\nexport function isBuiltInCallable(value: unknown): boolean {\n  return (\n    typeof value === 'function' &&\n    BUILTIN_CALLABLES.has(value as BuiltInCallable)\n  );\n}\n\n/**\n * @overload\n */\nexport function isInstanceOfUnknownClass(value: unknown): value is object;\n\n/**\n * @overload\n */\nexport function isInstanceOfUnknownClass(value: unknown): boolean;\n\n/**\n * Checks if a given value is an instance of a non-standard (unknown) class.\n *\n * This function determines whether the provided value is an object and has a prototype\n * that is neither `Object.prototype` (standard object) nor `null` (no prototype).\n * It helps differentiate between instances of custom classes and plain objects.\n *\n * @param {unknown} value - The value to check.\n * @returns {boolean} `true` if the value is an instance of a non-standard class, otherwise `false`.\n *\n * @example\n * ```ts\n * class MyClass {}\n * console.log(isInstanceOfUnknownClass(new MyClass())); // Output: true\n * console.log(isInstanceOfUnknownClass({})); // Output: false\n * console.log(isInstanceOfUnknownClass(Object.create(null))); // Output: false\n * console.log(isInstanceOfUnknownClass([])); // Output: true\n * ```\n */\nexport function isInstanceOfUnknownClass(value: unknown): boolean {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    Object.getPrototypeOf(value) !== Object.prototype &&\n    Object.getPrototypeOf(value) !== null\n  );\n}\n"],"names":["isString","value","isNotString","isNumber","isNotNumber","isBoolean","isNotBoolean","isUndefined","isNotUndefined","isDefined","isObjectPlain","Object","prototype","toString","call","proto","getPrototypeOf","isObjectStrict","Ctor","hasOwnProperty","constructor","Function","isObjectLoose","type","isClass","isBuiltInConstructor","descriptor","getOwnPropertyDescriptor","writable","Array","String","Number","Boolean","Date","RegExp","Error","EvalError","RangeError","ReferenceError","SyntaxError","TypeError","URIError","Map","WeakMap","Set","WeakSet","Promise","includes","BUILTIN_CALLABLES","BigInt","Symbol","isBuiltInCallable","has","isInstanceOfUnknownClass"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAiBM,SAAUA,EAASC,GACvB,MAAwB,iBAAVA,CAChB,CAkBM,SAAUC,EAAYD,GAC1B,OAAQD,EAASC,EACnB,CAkBM,SAAUE,EAASF,GACvB,MAAwB,iBAAVA,CAChB,CAkBM,SAAUG,EAAYH,GAC1B,OAAQE,EAASF,EACnB,CAkBM,SAAUI,EAAUJ,GACxB,MAAwB,kBAAVA,CAChB,CAkBM,SAAUK,EAAaL,GAC3B,OAAQI,EAAUJ,EACpB,CAkBM,SAAUM,EAAYN,GAC1B,YAAwB,IAAVA,CAChB,CAkBM,SAAUO,EAAeP,GAC7B,OAAQM,EAAYN,EACtB,CAmBM,SAAUQ,EAAUR,GACxB,OAAQM,EAAYN,EACtB,CA8CM,SAAUS,EAAcT,GAC5B,GAA8C,oBAA1CU,OAAOC,UAAUC,SAASC,KAAKb,GAA8B,OAAO,EAExE,MAAMc,EAAQJ,OAAOK,eAAef,GAEpC,OAAOc,IAAUJ,OAAOC,WAAuB,OAAVG,CACvC,CA+CM,SAAUE,EAAehB,GAC7B,GAAqB,iBAAVA,GAAgC,OAAVA,EAAgB,OAAO,EAExD,GAA8C,oBAA1CU,OAAOC,UAAUC,SAASC,KAAKb,GAA8B,OAAO,EAExE,MAAMc,EAAQJ,OAAOK,eAAef,GAEpC,GAAc,OAAVc,EAAgB,OAAO,EAE3B,MAAMG,EAAOP,OAAOC,UAAUO,eAAeL,KAAKC,EAAO,eACrDA,EAAMK,YACN,KAEJ,MACkB,mBAATF,GACPA,aAAgBA,GAChBG,SAAST,UAAUE,KAAKI,KAAUG,SAAST,UAAUE,KAAKb,EAE9D,CAwDM,SAAUqB,EAAcrB,GAC5B,MAAMsB,SAActB,EAEpB,OAAiB,OAAVA,IAA4B,WAATsB,GAA8B,aAATA,EACjD,CAuCM,SAAUC,EAAQvB,GACtB,GAAqB,mBAAVA,EAAsB,OAAO,EAExC,GAAIwB,EAAqBxB,GAAQ,OAAO,EAExC,IAEE,MAAMyB,EAAaf,OAAOgB,yBAAyB1B,EAAO,aAE1D,QAASyB,IAAeA,EAAWE,QACrC,CAAE,MACA,OAAO,CACT,CACF,CA0DM,SAAUH,EAAqBxB,GACnC,GAAqB,mBAAVA,EAAsB,OAAO,EA0BxC,MAvB6B,CAC3BU,OACAkB,MACAR,SACAS,OACAC,OACAC,QACAC,KACAC,OACAC,MACAC,UACAC,WACAC,eACAC,YACAC,UACAC,SACAC,IACAC,QACAC,IACAC,QACAC,SAGcC,SAAS9C,EAC3B,CAiBA,MAAM+C,EAAkD,IAAIJ,IAAI,CAC9DjC,OACAkB,MACAR,SACAS,OACAC,OACAC,QACAC,KACAC,OACAC,MACAC,UACAC,WACAC,eACAC,YACAC,UACAC,SACAC,IACAC,QACAC,IACAC,QACAC,QACAG,OACAC,SAoDI,SAAUC,EAAkBlD,GAChC,MACmB,mBAAVA,GACP+C,EAAkBI,IAAInD,EAE1B,CA+BM,SAAUoD,EAAyBpD,GACvC,MACmB,iBAAVA,GACG,OAAVA,GACAU,OAAOK,eAAef,KAAWU,OAAOC,WACP,OAAjCD,OAAOK,eAAef,EAE1B"}